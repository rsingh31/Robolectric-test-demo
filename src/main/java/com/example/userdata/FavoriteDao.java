package com.example.userdata;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table Favorite.
*/
public class FavoriteDao extends AbstractDao<Favorite, Void> {

    public static final String TABLENAME = "Favorite";

    /**
     * Properties of entity Favorite.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CreationDate = new Property(0, Long.class, "creationDate", false, "creationDate");
        public final static Property ExternalId = new Property(1, Long.class, "externalId", false, "externalId");
        public final static Property Object = new Property(2, String.class, "object", false, "object");
        public final static Property SearchName = new Property(3, String.class, "searchName", false, "searchName");
        public final static Property SortOrder = new Property(4, Long.class, "sortOrder", false, "sortOrder");
    };


    public FavoriteDao(DaoConfig config) {
        super(config);
    }
    
    public FavoriteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Favorite' (" + //
                "'creationDate' INTEGER," + // 0: creationDate
                "'externalId' INTEGER," + // 1: externalId
                "'object' TEXT," + // 2: object
                "'searchName' TEXT," + // 3: searchName
                "'sortOrder' INTEGER);"); // 4: sortOrder
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Favorite'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Favorite entity) {
        stmt.clearBindings();
 
        Long creationDate = entity.getCreationDate();
        if (creationDate != null) {
            stmt.bindLong(1, creationDate);
        }
 
        Long externalId = entity.getExternalId();
        if (externalId != null) {
            stmt.bindLong(2, externalId);
        }
 
        String object = entity.getObject();
        if (object != null) {
            stmt.bindString(3, object);
        }
 
        String searchName = entity.getSearchName();
        if (searchName != null) {
            stmt.bindString(4, searchName);
        }
 
        Long sortOrder = entity.getSortOrder();
        if (sortOrder != null) {
            stmt.bindLong(5, sortOrder);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Favorite readEntity(Cursor cursor, int offset) {
        Favorite entity = new Favorite( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // creationDate
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // externalId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // object
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // searchName
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // sortOrder
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Favorite entity, int offset) {
        entity.setCreationDate(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setExternalId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setObject(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSearchName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSortOrder(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Favorite entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Favorite entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
